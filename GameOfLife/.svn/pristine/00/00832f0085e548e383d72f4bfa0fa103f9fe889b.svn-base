import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JComponent;

/**
 * This class represents the game board. It can draw a graphical rendering of
 * its current state and can calculate its next state.
 * 
 * @author TODO 0: [YOUR NAMES HERE]. Created Sep 24, 2008.
 */
public class GameOfLife extends JComponent {
	private static final int MAX_ROWS = 90;
	private static final int MAX_COLUMNS = 90;
	private static final double DOT_SIZE = 7;
	private Boolean removeSquare = false;
	private Boolean addSquare = false;
//	private ArrayList<Coordinates> occupied;
	//private Coordinates[][] gameBoard;
	private Boolean [][] gameBoard;
	

	/*
	 * TODO 1: Decide how you'll represent the state of the game board. That is, what field(s)
	 * do you need?
	 */

	/**
	 * Constructs a new game board from the list of initially occupied
	 * coordinates.
	 * 
	 * @param initialCells
	 */
	public GameOfLife(ArrayList<Coordinates> initialCells) {
//		this.occupied = new ArrayList<Coordinates>();
//		this.occupied = initialCells;
		//this.gameBoard = new Coordinates[MAX_ROWS][MAX_COLUMNS];
		this.gameBoard = new Boolean[MAX_ROWS][MAX_COLUMNS];
		for(int i = 0; i < this.gameBoard.length; i++) {
			for(int j = 0; j < this.gameBoard[i].length; j++) {
					this.gameBoard[i][j] = false;
				}
		}
		for(int c = 0; c < initialCells.size(); c++){
			this.gameBoard[initialCells.get(c).getRow()][initialCells.get(c).getColumn()] = true; 
		}
//		System.out.println(getNeighborCount(50, 50));
		System.out.println(getNeighborCount(81,53));
		
	}
		
		
		/*
		 * TODO 2: Document, test, and implement this constructor that takes an
		 * ArrayList<Coordinates> specifying all the initially occupied squares
		 * on the game board. The Coordinates class is provided. NOTE: You will
		 * probably need a "smart" constructor.  Instead of just storing
		 * initialCells, you'll need to convert to whatever representation you
		 * chose in the previous to-do item.
		 */

	/**
	 * @param row
	 * @param column
	 * @return whether or not the square in the given row and column is occupied
	 */
	public boolean isOccupied(int row, int column) {
//			if(this.occupied.get(i).getRow() == row && this.occupied.get(i).getColumn() == column){
//				return true;
//			}
//		}
		if(this.gameBoard[row][column] == true){
			return true;
		}
		return false;
		/*
		 * TODO 4: Document, test, and implement this method that detects whether
		 * a particular square is occupied.
		 */
	}

	/**
	 * Counts the number of occupied cells around the given square.
	 * 
	 * @param row
	 * @param column
	 * @return the number of occupied cells
	 */
	@SuppressWarnings("boxing")
	public int getNeighborCount(int row, int column) {
		int count = 0;
		if(row == 0 ||row == MAX_ROWS-1 || column == 0 || column == MAX_COLUMNS-1){
			if(row == 0){
				/*
				 * upper left corner
				 */
				if(column == 0){
					/*
					 * normal cases
					 */
					if(this.gameBoard[row][column+1] == true){
						count++;
					}
					if(this.gameBoard[row +1 ][column+1] == true){
						count++;
					}
					if(this.gameBoard[row +1 ][column] == true){
						count++;
					}
					/*
					 * extended to left
					 */
					if(this.gameBoard[row][MAX_COLUMNS-1] == true){
						count++;
					}
					if(this.gameBoard[row+1][MAX_COLUMNS-1] == true){
						count++;
					}
					if(this.gameBoard[MAX_ROWS-1][MAX_COLUMNS-1] == true){
						count++;
					}
					/*
					 * exended to right
					 */
					if(this.gameBoard[MAX_ROWS-1][column] == true){
						count++;
					}
					if(this.gameBoard[MAX_ROWS-1][column+1] == true){
						count++;
					}
					return count;
				}
				/*
				 * Upper right corner 
				 */
				if(column == MAX_COLUMNS-1){
					/*
					 * normal cases
					 */
					if(this.gameBoard[row+1][column] == true){
						count++;
					}
					if(this.gameBoard[row+1][column-1] == true){
						count++;
					}
					if(this.gameBoard[row][column-1] == true){
						count++;
					}
					/*
					 * extended to the right 
					 */
					if(this.gameBoard[row+1][0] == true){
						count++;
					}
					if(this.gameBoard[row][0] == true){
						count++;
					}
					if(this.gameBoard[MAX_ROWS-1][0] == true){
						count++;
					}
					/*
					 * extended up 
					 */
					if(this.gameBoard[MAX_ROWS-1][column] == true){
						count++;
					}
					if(this.gameBoard[MAX_ROWS-1][column-1] == true){
						count++;
					}
					return count;
					
				}
				if(this.gameBoard[row][column+1] == true){
					count++;
				}
				if(this.gameBoard[row][column-1] == true){
					count++;
				}
				if(this.gameBoard[row+1][column+1] == true){
					count++;
				}
				if(this.gameBoard[row+1][column+1] == true){
					count++;
				}
				if(this.gameBoard[row+1][column+1] == true){
					count++;
				}
				if(this.gameBoard[MAX_ROWS-1][column] == true){
					count++;
				}
				if(this.gameBoard[MAX_ROWS-1][column+1] == true){
					count++;
				}
				if(this.gameBoard[MAX_ROWS-1][column-1] == true){
					count++;
				}
				return count;
				
			}
			/*
			 * Bottom Row, not corner 
			 */
			/**
			 * TODO make this work
			 */
			if(row == MAX_ROWS-1){
				if(column == 0){
					if(this.gameBoard[row-1][column+1] == true){
						count++;
					}
					if(this.gameBoard[row-1][column] == true){
						count++;
					}
					if(this.gameBoard[row][column+1] == true){
						count++;
					}
					/*
					 * 
					 */
					if(this.gameBoard[0][column+1] == true){
						count++;
					}
					if(this.gameBoard[0][column] == true){
						count++;
					}
					if(this.gameBoard[0][MAX_COLUMNS-1] == true){
						count++;
					}
					/*
					 * 
					 */
					if(this.gameBoard[row][MAX_COLUMNS-1] == true){
						count++;
					}
					if(this.gameBoard[row-1][MAX_COLUMNS-1] == true){
						count++;
					}
					return count;
				}
					
				/*
				 * Bottom row, right corner 
				 */
				if(column == MAX_COLUMNS-1){
					if(this.gameBoard[row-1][column] == true){
						count++;
					}
					if(this.gameBoard[row][column-1] == true){
						count++;
					}
					if(this.gameBoard[row-1][column-1] == true){
						count++;
					}
					/*
					 * 
					 */
					if(this.gameBoard[row-1][0] == true){
						count++;
					}
					if(this.gameBoard[row][0] == true){
						count++;
					}
					if(this.gameBoard[0][0] == true){
						count++;
					}
					/*
					 * 
					 */
					if(this.gameBoard[0][column-1] == true){
						count++;
					}
					if(this.gameBoard[0][column] == true){
						count++;
					}
					return count;
				}
				if(this.gameBoard[row][column-1] == true){
					count++;
				}
				if(this.gameBoard[row][column+1] == true){
					count++;
				}
				if(this.gameBoard[row-1][column+1] == true){
					count++;
				}
				if(this.gameBoard[row-1][column] == true){
					count++;
				}
				if(this.gameBoard[row-1][column-1] == true){
					count++;
				}
				if(this.gameBoard[0][column-1] == true){
					count++;
				}
				if(this.gameBoard[0][column] == true){
					count++;
				}
				if(this.gameBoard[0][column+1] == true){
					count++;
				}
				return count;
			}
			/*
			 * Bottom Row, left Column 
			 */
			if(column == 0){
				if(row != 0 && row != MAX_ROWS-1){
					if(this.gameBoard[row-1][column] == true){
						count++;
					}
					if(this.gameBoard[row+1][column] == true){
						count++;
					}
					if(this.gameBoard[row-1][column+1] == true){
						count++;
					}
					if(this.gameBoard[row][column+1] == true){
						count++;
					}
					if(this.gameBoard[row+1][column+1] == true){
						count++;
					}
					if(this.gameBoard[row-1][MAX_COLUMNS-1] == true){
						count++;
					}
					if(this.gameBoard[row][MAX_COLUMNS-1] == true){
						count++;
					}
					if(this.gameBoard[row+1][MAX_COLUMNS-1] == true){
						count++;
					}
					return count;
				}
			}
			/*
			 * Rightmost Column
			 */
			if(column == MAX_COLUMNS-1){
				if(row!= 0 && row!=MAX_ROWS){
					if(this.gameBoard[row+1][column] == true){
						count++;
					}
					if(this.gameBoard[row-1][column] == true){
						count++;
					}
					if(this.gameBoard[row-1][column-1] == true){
						count++;
					}
					if(this.gameBoard[row][column-1] == true){
						count++;
					}
					if(this.gameBoard[row+1][column-1] == true){
						count++;
					}
					if(this.gameBoard[row-1][0] == true){
						count++;
					}
					if(this.gameBoard[row][0] == true){
						count++;
					}
					if(this.gameBoard[row+1][0] == true){
						count++;
					}
					return count;
				}
			}				
		}
			if(this.gameBoard[row+1][column] == true){
				count++;
			}
			if(this.gameBoard[row-1][column] == true){
				count++;
			}
			if(this.gameBoard[row][column+1] == true){
				count++;
			}
			if(this.gameBoard[row][column-1] == true){
				count++;
			}
			if(this.gameBoard[row+1][column+1] == true){
				count++;
			}
			if(this.gameBoard[row+1][column-1] == true){
				count++;
			}
			if(this.gameBoard[row-1][column+1] == true){
				count++;
			}
			if(this.gameBoard[row-1][column-1] == true){
				count++;
			}
//			System.out.println(count);
			return count;
		/*
		 * TODO 5: Document, test, and implement this method that takes a row and
		 * column and returns the number of occupied neighbor squares.
		 */
//		return count;
			
	}


	/**
	 * Updates the state of this game board for the next generation.
	 */
	public void nextGeneration() {
		/*
		 * TODO 6: Document, test, and implement this method that calculates the
		 * occupied squares for the next generation of this game. See p. 332 of
		 * Big Java, or the class slides for the rules. You'll need to use
		 * temporary storage to hold the next generation information as you
		 * calculate it.
		 */
		System.out.println(getNeighborCount(81, 53));
		Boolean[][] tempBoard = this.gameBoard.clone();
//		System.out.println(getNeighborCount(81, 53));
		for(int r = 0; r < this.gameBoard.length; r++) {
			for(int c = 0; c < this.gameBoard[0].length; c++) {
				if(getNeighborCount(r, c) >= 4) {
					tempBoard[r][c] = false;
				}
				if(getNeighborCount(r, c) == 3) {
					tempBoard[r][c] = true;
				}
				if(getNeighborCount(r, c) <= 1) {
					tempBoard[r][c] = false;
				}
			}
		}
//		System.out.println(getNeighborCount(82, 53));
		this.gameBoard = tempBoard.clone();
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;

		/*
		 * TODO 3: Implement this method to draw the game board.  You don't have to 
		 * draw the grid if you don't want, just the occupied cells.
		 */	
		for(int r = 0; r < this.gameBoard.length; r++) {
			Point2D.Double startPoint = new Point2D.Double(r*GameOfLife.DOT_SIZE,0);
			Point2D.Double endPoint = new Point2D.Double(r*GameOfLife.DOT_SIZE,750);
			Line2D.Double line = new Line2D.Double(startPoint, endPoint);
			g2.draw(line);
			for(int c = 0; c < this.gameBoard[1].length; c++) {
				Point2D.Double startPoint2 = new Point2D.Double(0,r*GameOfLife.DOT_SIZE);
				Point2D.Double endPoint2 = new Point2D.Double(630, r*GameOfLife.DOT_SIZE);
				Line2D.Double line2 = new Line2D.Double(startPoint2, endPoint2);
				g2.draw(line2);
				Rectangle2D.Double cell = new Rectangle2D.Double(c*GameOfLife.DOT_SIZE, r*GameOfLife.DOT_SIZE, GameOfLife.DOT_SIZE, GameOfLife.DOT_SIZE);
				if(isOccupied(r,c)) {
					g2.setColor(Color.black);
					g2.fill(cell);
				}
			}
		}
	}

}
