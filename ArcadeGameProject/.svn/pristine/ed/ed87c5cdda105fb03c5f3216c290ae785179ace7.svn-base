import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.concurrent.ExecutorService;

import javax.swing.JComponent;

/**
 * Draw the interactable Digger Game
 *
 * @author goldacbj. Created Feb 10, 2015.
 */
@SuppressWarnings("serial")
public class DiggerGameComponent extends JComponent {
	DiggerGame game;
	ExecutorService threadPool;
	Thread heroThread;

	public DiggerGameComponent(DiggerGame diggerGame, ExecutorService threadPool, ScorePanel scorePanel) {
		this.game = diggerGame;
		this.threadPool = threadPool;
		this.heroThread = new UpdateHeroThread(this.game, this, scorePanel);
		this.setBounds(100, 100, 895, 895);
		this.setFocusable(true);
		
		// adds a key listener to the gamecomponent
		this.addKeyListener(new KeyListener() {

			@Override
			public void keyPressed(KeyEvent arg0) {
				if (arg0.getKeyCode() == KeyEvent.VK_LEFT) {
					if (DiggerGameComponent.this.game.hero.getX() > 0) {
						DiggerGameComponent.this.game.hero.setVelocity(-1, 0);
						int x = DiggerGameComponent.this.game.hero.getX();
						int y = DiggerGameComponent.this.game.hero.getY();
						DiggerGameComponent.this.threadPool.execute(DiggerGameComponent.this.heroThread);
						try {
							DiggerGameComponent.this.heroThread.join(1000);
						} catch (InterruptedException exception) {
							// TODO Auto-generated catch-block stub.
							exception.printStackTrace();
						}
					}else{
						DiggerGameComponent.this.game.hero.setVelocity(0, 0);

					}
				}

				if (arg0.getKeyCode() == KeyEvent.VK_RIGHT) {
					if (DiggerGameComponent.this.game.hero.getX() < DiggerGameComponent.this.game.gameBoard.length - 1) {
						DiggerGameComponent.this.game.hero.setVelocity(1, 0);
						int x = DiggerGameComponent.this.game.hero.getX();
						int y = DiggerGameComponent.this.game.hero.getY();
						DiggerGameComponent.this.threadPool.execute(DiggerGameComponent.this.heroThread);
						try {
							DiggerGameComponent.this.heroThread.join(1000);
						} catch (InterruptedException exception) {
							// TODO Auto-generated catch-block stub.
							exception.printStackTrace();
						}
					}else{
						DiggerGameComponent.this.game.hero.setVelocity(0, 0);

					}
				}

				if (arg0.getKeyCode() == KeyEvent.VK_UP) {
					if (DiggerGameComponent.this.game.hero.getY() > 0) {
						DiggerGameComponent.this.game.hero.setVelocity(0, -1);
						int x = DiggerGameComponent.this.game.hero.getX();
						int y = DiggerGameComponent.this.game.hero.getY();
						DiggerGameComponent.this.threadPool.execute(DiggerGameComponent.this.heroThread);
						try {
							DiggerGameComponent.this.heroThread.join(1000);
						} catch (InterruptedException exception) {
							// TODO Auto-generated catch-block stub.
							exception.printStackTrace();
						}
					}else{
						DiggerGameComponent.this.game.hero.setVelocity(0, 0);

					}
				}

				if (arg0.getKeyCode() == KeyEvent.VK_DOWN) {
					if (DiggerGameComponent.this.game.hero.getY() < DiggerGameComponent.this.game.gameBoard[1].length - 1) {
						DiggerGameComponent.this.game.hero.setVelocity(0, 1);
						int x = DiggerGameComponent.this.game.hero.getX();
						int y = DiggerGameComponent.this.game.hero.getY();
						DiggerGameComponent.this.threadPool.execute(DiggerGameComponent.this.heroThread);
						try {
							DiggerGameComponent.this.heroThread.join(1000);
						} catch (InterruptedException exception) {
							// TODO Auto-generated catch-block stub.
							exception.printStackTrace();
						}
					}else{
						DiggerGameComponent.this.game.hero.setVelocity(0, 0);

					}

				}

				if (arg0.getKeyCode() == KeyEvent.VK_U) {
					DiggerGameComponent.this.game.goUpLevel();
					repaint();
				}

				if (arg0.getKeyCode() == KeyEvent.VK_D) {
					DiggerGameComponent.this.game.goDownLevel();
					repaint();
				}
				
				if(arg0.getKeyCode() ==  KeyEvent.VK_SPACE){
					DiggerGameComponent.this.game.hero.fireWeapon();
				}


			}

			@Override
			public void keyReleased(KeyEvent arg0) {
				DiggerGameComponent.this.game.hero.setVelocity(0, 0);

			}

			@Override
			public void keyTyped(KeyEvent arg0) {}

		});

	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		this.game.drawOn(g);
	}
}
